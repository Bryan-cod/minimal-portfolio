import {
  require_react as require_react2
} from "./chunk-PZSL7UXH.js";
import {
  require_react
} from "./chunk-UWDTMQLH.js";
import {
  tsParticles
} from "./chunk-YQ6KA3V4.js";
import {
  __toESM
} from "./chunk-TWLJ45QX.js";

// node_modules/react-particles/esm/Particles.js
var import_react = __toESM(require_react());
var import_react2 = __toESM(require_react2());
var defaultId = "tsparticles";
var Particles = class extends import_react.Component {
  constructor(props) {
    super(props);
    this.state = {
      init: false,
      library: void 0
    };
  }
  destroy() {
    if (!this.state.library) {
      return;
    }
    this.state.library.destroy();
    this.setState({
      library: void 0
    });
  }
  shouldComponentUpdate(nextProps) {
    return !(0, import_react2.default)(nextProps, this.props);
  }
  componentDidUpdate() {
    this.refresh();
  }
  forceUpdate() {
    this.refresh().then(() => {
      super.forceUpdate();
    });
  }
  componentDidMount() {
    (async () => {
      if (this.props.init) {
        await this.props.init(tsParticles);
      }
      this.setState({
        init: true
      }, async () => {
        await this.loadParticles();
      });
    })();
  }
  componentWillUnmount() {
    this.destroy();
  }
  render() {
    const { width, height, className, canvasClassName, id } = this.props;
    return import_react.default.createElement(
      "div",
      { className, id },
      import_react.default.createElement("canvas", { className: canvasClassName, style: Object.assign(Object.assign({}, this.props.style), {
        width,
        height
      }) })
    );
  }
  async refresh() {
    this.destroy();
    await this.loadParticles();
  }
  async loadParticles() {
    var _a, _b, _c;
    if (!this.state.init) {
      return;
    }
    const cb = async (container2) => {
      if (this.props.container) {
        this.props.container.current = container2;
      }
      this.setState({
        library: container2
      });
      if (this.props.loaded) {
        await this.props.loaded(container2);
      }
    };
    const id = (_b = (_a = this.props.id) !== null && _a !== void 0 ? _a : Particles.defaultProps.id) !== null && _b !== void 0 ? _b : defaultId, container = this.props.url ? await tsParticles.loadJSON(id, this.props.url) : await tsParticles.load(id, (_c = this.props.params) !== null && _c !== void 0 ? _c : this.props.options);
    await cb(container);
  }
};
Particles.defaultProps = {
  width: "100%",
  height: "100%",
  options: {},
  style: {},
  url: void 0,
  id: defaultId
};

// node_modules/react-particles/esm/index.js
var esm_default = Particles;
export {
  Particles,
  esm_default as default
};
//# sourceMappingURL=react-particles.js.map
